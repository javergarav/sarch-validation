architecture:
    software_system = ewolff_microservice

    component_and_connector:
        elements:
            # Presentation Layer
            component web_ui (presentation > web_frontend)

            # Logic Layer - Microservices following DDD
            component customer_ms (logic > microservice):
                programming_language: Java
            component order_ms (logic > microservice):
                programming_language: Java
            component product_ms (logic > microservice):
                programming_language: Java

            # Communication Components
            component api_gateway (communication > api_gateway)
            component message_broker (communication > message_broker)

            # Data Layer - separate database per microservice
            component customers_db (data > database)
            component orders_db (data > database)
            component products_db (data > database)

            # Infrastructure Components
            component load_balancer (infrastructure > load_balancer)
            component reverse_proxy (infrastructure > reverse_proxy)

            # Connectors
            connector HttpUI : http
            connector RestAPI : rest_http
            connector DBCustomers : db_connector
            connector DBOrders : db_connector
            connector DBProducts : db_connector
            connector BrokerConnector : amqp

        relations:
            # Frontend access
            attachment (web_ui -> HttpUI -> load_balancer)
            attachment (load_balancer -> HttpUI -> reverse_proxy)
            attachment (reverse_proxy -> RestAPI -> api_gateway)

            # API Gateway routes to microservices
            attachment (api_gateway -> RestAPI -> customer_ms)
            attachment (api_gateway -> RestAPI -> order_ms)
            attachment (api_gateway -> RestAPI -> product_ms)

            # Event-driven communication
            attachment (customer_ms -> BrokerConnector -> message_broker)
            attachment (order_ms -> BrokerConnector -> message_broker)
            attachment (product_ms -> BrokerConnector -> message_broker)

            # Database connections
            attachment (customer_ms -> DBCustomers -> customers_db)
            attachment (order_ms -> DBOrders -> orders_db)
            attachment (product_ms -> DBProducts -> products_db)

    deployment:
        elements:
        relations:
