architecture:
    software_system = enterprise_planner

    component_and_connector:
        elements:
            # Presentation Layer
            component web_ui (presentation > web_frontend)
            component desktop_app (presentation > desktop_frontend)

            # Logic Layer - Microservices
            component project_ms (logic > microservice):
                programming_language: Java
            component task_ms (logic > microservice):
                programming_language: Java
            component user_ms (logic > microservice):
                programming_language: Java
            component notification_ms (logic > microservice):
                programming_language: Java

            # Communication Components
            component api_gateway (communication > api_gateway)
            component message_broker (communication > message_broker)

            # Data Layer - database per microservice
            component projects_db (data > database)
            component tasks_db (data > database)
            component users_db (data > database)
            component notifications_db (data > database)

            # Infrastructure Components
            component load_balancer (infrastructure > load_balancer)
            component reverse_proxy (infrastructure > reverse_proxy)

            # Connectors
            connector HttpUI : http
            connector RestAPI : rest_http
            connector DBProjects : db_connector
            connector DBTasks : db_connector
            connector DBUsers : db_connector
            connector DBNotifications : db_connector
            connector BrokerConnector : amqp

        relations:
            # Frontend access
            attachment (web_ui -> HttpUI -> load_balancer)
            attachment (desktop_app -> HttpUI -> load_balancer)
            attachment (load_balancer -> HttpUI -> reverse_proxy)
            attachment (reverse_proxy -> RestAPI -> api_gateway)

            # API Gateway routes to microservices
            attachment (api_gateway -> RestAPI -> project_ms)
            attachment (api_gateway -> RestAPI -> task_ms)
            attachment (api_gateway -> RestAPI -> user_ms)
            attachment (api_gateway -> RestAPI -> notification_ms)

            # Event-driven communication
            attachment (project_ms -> BrokerConnector -> message_broker)
            attachment (task_ms -> BrokerConnector -> message_broker)
            attachment (user_ms -> BrokerConnector -> message_broker)
            attachment (notification_ms -> BrokerConnector -> message_broker)

            # Database connections
            attachment (project_ms -> DBProjects -> projects_db)
            attachment (task_ms -> DBTasks -> tasks_db)
            attachment (user_ms -> DBUsers -> users_db)
            attachment (notification_ms -> DBNotifications -> notifications_db)

    deployment:
        elements:
        relations:
